version: 2.1
# commands are used to group common steps and enable re-use
commands:
  mvn_build:
    description: "Builds jar file using maven and stores to workspace"
    parameters:
      build_path:
        type: string
        default: "."
      build_jar:
        type: string
        default: "doorman.jar"
    steps:      
      - run: 
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
            sudo apt-get install -y nodejs
      - run: 
          command: |
            cd << parameters.build_path >>
            mvn clean install
  docker_push:
    description: "Builds docker image and pushes to dockerhub"
    parameters:
      build_path:
        type: string
        default: "."
      image:
        type: string
        default: "hyperledgerlabs/doorman-linuxkit"
      tag:
        type: string
        default: "latest"
    steps:
      - setup_remote_docker:
          version: 18.06.0-ce
      - run: ls -a << parameters.build_path >>/target/
      # build and push Docker image
      - run: |
          cd << parameters.build_path >>
          docker build -t << parameters.image >>:<< parameters.tag >> .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
          docker push << parameters.image >>:<< parameters.tag >>
      - run: |
          echo $CIRCLE_TAG
          if [[ -z "$CIRCLE_TAG" ]]; then 
            echo "Not a tagged check-in";
          else
            docker tag << parameters.image >>:<< parameters.tag >> << parameters.image >>:$CIRCLE_TAG;
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin;
            docker push << parameters.image >>:$CIRCLE_TAG;
          fi
# Create jobs, so that a workflow can coordinate them.
jobs: 
  doorman_build: # Builds doorman jar file
    docker: # it uses the docker executor
      - image: circleci/openjdk:8-jdk-stretch
    # Steps are a list of commands to run inside the docker container above.
    steps:
      - checkout # this pulls pulls code down from GitHub
      - mvn_build:
          build_path: "platforms/r3-corda/images/doorman"
          build_jar: "doorman.jar"
      - docker_push:
          build_path: "platforms/r3-corda/images/doorman"
          image: "hyperledgerlabs/doorman-linuxkit"
  networkmap_build: # Builds networkmap jar file
    docker: # it uses the docker executor
      - image: circleci/openjdk:8-jdk-stretch
    # Steps are a list of commands to run inside the docker container above.
    steps:
      - checkout # this pulls pulls code down from GitHub
      - mvn_build:
          build_path: "platforms/r3-corda/images/networkmap"
          build_jar: "network-map-service.jar"
      - docker_push:
          build_path: "platforms/r3-corda/images/networkmap"
          image: "hyperledgerlabs/networkmap-linuxkit"
  shared_test:
    docker:
      - image: circleci/python:3.6.10
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Prepare environment
          command: |
            docker --version
            sudo pip3 install 'ansible==2.9.4'
            sudo pip3 install 'molecule[docker]==3.0.2'
            sudo pip3 install openshift
      - run: |
          export PATH=~/.local/bin/:~/bin:$PATH
          cd platforms/shared/configuration
          sudo molecule test


# Under the workflows: map, we can coordinate our two jobs, defined above.
workflows:
  version: 2
  shared:
    jobs:
      - shared_test
  corda: # this is the name of our workflow
    jobs: # and here we list the jobs we are going to run.
      - doorman_build:
          filters:      # doorman build only for develop branch and all tags
            branches:
              only:
                - develop
            tags:
              only: /.*/
      - networkmap_build:
          filters:      # networkmap build only for develop branch and all tags
            branches:
              only:
                - develop
            tags:
              only: /.*/
