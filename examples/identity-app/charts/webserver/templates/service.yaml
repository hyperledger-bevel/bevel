apiVersion: v1
kind: Service
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
  {{- if eq $.Values.proxy.provider "ambassador" }}
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind: Mapping
      name: {{ .Values.metadata.name }}-
      host: {{ .Values.proxy.external_url }}:{{ .Values.proxy.port }}
      prefix: /
      service: https://{{ .Values.metadata.name }}.{{ .Values.metadata.namespace }}:{{ .Values.service.port }}
      tls: {{ .Values.metadata.name }}_mapping_tlscontext
      ---
      apiVersion: ambassador/v1
      kind: TLSContext
      name: {{ .Values.metadata.name }}_mapping_tlscontext
      hosts:
      - {{ .Values.proxy.external_url }}
      secret: {{ .Values.organization.name }}-ambassador-certs
    {{- end }}
spec:
{{ if eq $.Values.proxy.provider "minikube" }}
  type: NodePort
{{ else }}
  type: ClusterIP
{{ end }}
  ports:
  - name: indy-webserver
    port: {{ $.Values.service.port }}
    targetPort: 8000
{{ if eq $.Values.proxy.provider "minikube" }}
    nodePort: {{ $.Values.proxy.port }}
{{ end }}
  selector:
    app: "{{ $.Values.metadata.name }}"
