# This role generates certificates for rootca and ambassador
# and places them in vault. Certificates are created using openssl

---
# Set ambassador and rootca folder variables
- name: "Set ambassador and rootca folder variables"
  set_fact:
    ambassadortls: "{{ playbook_dir }}/build/{{ org.name | lower }}/{{ peer.name | lower }}"
    rootca: "{{ playbook_dir }}/build/cordaentrootca"

############################################################################################
########################### CREATE DIRECTORIES, IF ABSENT ##################################

# Ensure the rootca directory exists
- name: "Ensure rootca dir exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "{{ rootca }}"
    check: "ensure_dir"

# Ensures the ambassador tls directory exists
- name: "Ensure ambassador dir exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "{{ ambassadortls }}"
    check: "ensure_dir"

############################################################################################
###################### CHECK IF ROOT CERTIFICATES ARE PRESENT IN VAULT #####################

# Checks if root certs are already created and stored in vault for node
- name: Checks if root certs are already created and stored in vault for node
  shell: |
    vault kv get -format=yaml secret/{{ org.name | lower }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: root_certs_node
  ignore_errors: yes
  when: org.type == 'node'

############################################################################################
###################### FETCH ROOT CERTIFICATES FROM VAULT, IF PRESENT ######################

# Get the existing root certs for node from vault, if any
- name: Get the existing root certs for node from vault, if any
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_crypto"
  vars:
    vault_output: "{{ root_certs_node.stdout | from_yaml }}"
    type: "rootca"
    cert_path: "{{ rootca }}"
  when: root_certs_node.failed | default(True) == False

############################################################################################
############################## STORE THE KEYSTORE IN A VARIABLE  ###########################

# Store the exisiting key.jks file in a variable
- name: Store the exisiting key.jks file in a variable
  stat:
    path: "{{ rootca }}/rootca.jks"
  register: rootca_stat_result

############################################################################################
#################### GENERATE ROOT CA CERTIFICATES, IF ABSENT IN VAULT #####################

# Generate Root CA certificates
- name: Generate Root CA certificates
  shell: |
    cd {{ rootca }}
    eval "keytool -genkey -alias rootca -dname {{ org.subject | quote }} -keystore rootca.jks -storepass quorum -keypass quorum"
    eval "openssl ecparam -name prime256v1 -genkey -noout -out rootca.key"
    eval "openssl req -x509 -config {{ playbook_dir }}/openssl.conf -new -nodes -key rootca.key -days 1024 -out rootca.pem -extensions v3_ca -subj '/{{ org.subject | regex_replace(',', '/') }}'"
    eval "openssl pkcs12 -export -name cert -inkey rootca.key -in rootca.pem -out rootcacert.pkcs12 -cacerts -passin pass:'quorum' -passout pass:'quorum'"
    eval "openssl pkcs12 -export -name key -inkey rootca.key -in rootca.pem -out rootcakey.pkcs12 -passin pass:'quorum' -passout pass:'quorum'"
    eval "yes | keytool -importkeystore -srckeystore rootcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass quorum -destkeystore rootca.jks -deststorepass quorum"
    eval "yes | keytool -importkeystore -srckeystore rootcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass quorum -destkeystore rootca.jks -deststorepass quorum"
  when: root_certs_node.failed | default(False) == True and rootca_stat_result.stat.exists == False

############################################################################################
###################### CHECK IF TLS CERTIFICATES ARE ALREADY IN VAULT ######################

# Check if the ambassador tls certs are already created and stored in the vault for node
- name: Check if the ambassador tls certs are already created and stored in the vault for node
  shell: |
    vault kv get -format=yaml secret/{{ org.name | lower }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: ambassador_tls_certs_node
  ignore_errors: yes
  when: org.type == 'node'

############################################################################################
###################### FETCH TLS CERTIFICATES FROM VAULT, IF PRESENT #######################

# Gets the existing ambassador tls certs for node
- name: Get ambassador tls certs for node
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_crypto"
  vars:
    vault_output: "{{ ambassador_tls_certs_node.stdout | from_yaml }}"
    type: "ambassador"
    cert_path: "{{ ambassadortls }}"
  when: ambassador_tls_certs_node.failed | default(True) == False

############################################################################################
###################### CREATE OPENSSL FILE, FOR TLS CERTS GENERATION #######################

# Generates the openssl file for domain
- name: Generate openssl conf file
  shell: |
    cd {{ambassadortls}}
    cat <<EOF >openssl{{ peer.name }}.conf
    [dn]
    CN={{ domain_name }}
    [req]
    distinguished_name = dn
    [EXT]
    subjectAltName=DNS:{{ domain_name }}
    keyUsage=digitalSignature
    extendedKeyUsage=serverAuth
    EOF
  vars:
    domain_name: "{{ peer.name }}.{{ org.external_url_suffix }}"
  when: ambassador_tls_certs_node.failed | default(False) == True

############################################################################################
#################### GENERATE TLS CERTIFICATES, IF ABSENT IN VAULT #########################

# Generates the ambassador tls certificates for node if already not generated
- name: Generate ambassador tls certs for node
  shell: |
    cd {{ ambassadortls }}
    openssl ecparam -name prime256v1 -genkey -noout -out {{ peer.name }}.key
    openssl req -new -nodes -key {{ peer.name }}.key -days 1000 -out {{ peer.name }}.csr \
    -extensions EXT -subj "/CN={{domain_name}}" -config "{{ ambassadortls }}/openssl{{ peer.name }}.conf"
    openssl x509 -extfile {{ playbook_dir }}/openssl.conf -req -days 1000 -in {{ peer.name }}.csr -CA {{ rootca }}/rootca.pem -CAkey {{ rootca }}/rootca.key -out {{ peer.name }}.pem -set_serial 01 -extensions v3_nonca
    cat {{ peer.name }}.pem > {{ peer.name }}-certchain.pem
    cat {{ rootca }}/rootca.pem >> {{ peer.name }}-certchain.pem
  vars:
    domain_name: "{{ peer.name }}.{{ org.external_url_suffix }}"
  when:  ambassador_tls_certs_node.failed | default(False) == True

############################################################################################
############################## STORE TLS CERTS IN VAULT ####################################

# Stores the generated ambassador tls certificates in vault for node
- name: Store the generated ambassador tls certs in vault for node
  shell: |
    vault kv put secret/{{ org.name | lower }}/tlscerts rootca="$(cat {{ rootca }}/rootca.jks | base64)" ambassadorcrt="$(cat {{ ambassadortls }}/{{ peer.name }}-certchain.pem | base64)" ambassadorkey="$(cat {{ ambassadortls }}/{{ peer.name }}.key | base64)"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: ambassador_tls_certs_node.failed | default(False) == True and org.type == 'node'

############################################################################################
#################### STORE IDMAN AND NETWORKMAP CERTS IN NODE VAULT ########################

# Store idman certs to the vault
- name: Store idman certs to the vault
  shell: |
    vault kv put secret/{{ org.name | lower }}/certs/idman cert="$(cat {{ orderer.certificate }})" 
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  loop: "{{ network['orderers'] }}"
  loop_control:
    loop_var: orderer
  when: ambassador_tls_certs_node.failed | default(False) == True and org.type == 'node' and orderer.type == 'idman'

# Store networkmap certs to the vault
- name: Store networkmap certs to the vault
  shell: |
    vault kv put secret/{{ org.name | lower }}/certs/networkmap cert="$(cat {{ orderer.certificate }})" 
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  loop: "{{ network['orderers'] }}"
  loop_control:
    loop_var: orderer
  when: ambassador_tls_certs_node.failed | default(False) == True and org.type == 'node' and orderer.type == 'networkmap'

############################################################################################
#################### CHECK AND CREATE AMBASSADOR CERTS, IF ABSENT ##########################

# Check if Ambassador credentials exist already
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: default
    name: "{{ peer.name }}-ambassador-certs"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
  register: get_ambassador_secret

# This task creates the Ambassador TLS credentials for ambassador if they dont exist
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} kubectl create secret tls {{ peer.name }}-ambassador-certs --cert={{ ambassadortls }}/{{ peer.name }}-certchain.pem --key={{ ambassadortls }}/{{ peer.name }}.key -n default
  when: get_ambassador_secret.resources|length == 0
