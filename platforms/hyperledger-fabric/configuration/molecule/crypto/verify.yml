---
- name: Verify
  hosts: localhost
  tasks:

#####################################################################################
  #This task checks if the ca.key is created for orderers or not
  - name: Check if the ca.key is created for orderers or not
    stat:
      path: "./build/crypto-config/ordererOrganizations/testorderer/ca/testorderer-CA.key"
    register: ca_key_orderer_check
  
#####################################################################################
  #This task assert if the ca.key exists for orderers
  - name: Assert if the ca.key exists for orderers
    assert:
      that: ca_key_orderer_check.stat.exists

#####################################################################################
  #This task checks if the ca.pem is created for orderers or not
  - name: Check if the ca.pem is created for orderers or not
    stat:
      path: "./build/crypto-config/ordererOrganizations/testorderer/ca/ca.testorderer-cert.pem"
    register: ca_pem_orderer_check
  
#####################################################################################
  #This task assert if the ca.pem exists for orderers
  - name: Assert if the ca.pem exists for orderers
    assert:
      that: ca_pem_orderer_check.stat.exists

#####################################################################################
  #This task checks if the crypto material are written to Vault for orderer
  - name: Check if the crypto material are written to Vault for orderer
    shell: |
      vault kv get -field=ca.testorderer-cert.pem secret/crypto/ordererOrganizations/testorderer/ca
      vault kv get -field=testorderer-CA.key secret/crypto/ordererOrganizations/testorderer/ca
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_orderer_CA_cert_key
    delegate_to: localhost
  
#####################################################################################
  #This task assert if the orderer tls certs is created or not
  - name: Assert if the orderer tls cert are present in the Vault
    assert:
      that: vault_orderer_CA_cert_key.failed == False

#####################################################################################
  #This task checks if the ca server admin credentials is created or not
  - name: Check if the ca server admin credentials are written to Vault for orderer
    shell: |
      vault kv get secret/credentials/testorderer/ca/testorderer
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_caadmin_result
    delegate_to: localhost
  
#####################################################################################
  #This task assert if the ca server admin credentials is created or not
  - name: Assert if the ca server admin credentials are written to Vault for orderer
    assert:
      that: vault_caadmin_result.failed == False

#####################################################################################
  #This task checks if the value file is created for CA of the orderers
  - name: Check if the value file is created for CA of the orderers
    stat:
      path: "test/test_ca/testorderer.yaml"
    register: orderer_ca_check
  
#####################################################################################
  #This task assert if the value file is created for CA of the orderers
  - name: Assert if the value file is created for CA of the orderers
    assert:
      that: orderer_ca_check.stat.exists

# 
# ################# peers ##########################################
#####################################################################################
  #This task checks if the ca.key is created for peers or not
  - name: Check if the ca.key is created for peers or not
    stat:
      path: "./build/crypto-config/peerOrganizations/testpeer/ca/testpeer-CA.key"
    register: ca_key_peer_check
  
#####################################################################################
  #This task assert if the ca.key exists for peers
  - name: Assert if the ca.key exists for peers
    assert:
      that: ca_key_peer_check.stat.exists

#####################################################################################
  #This task checks if the ca.pem is created for peers or not
  - name: Check if the ca.pem is created for peers or not
    stat:
      path: "./build/crypto-config/peerOrganizations/testpeer/ca/ca.testpeer-cert.pem"
    register: ca_pem_peer_check
  
#####################################################################################
  #This task assert if the ca.pem exists for peers
  - name: Assert if the ca.pem exists for peers
    assert:
      that: ca_pem_peer_check.stat.exists

#####################################################################################
  #This task checks if the crypto material are written to Vault for peers
  - name: Check if the crypto material are written to Vault for peers
    shell: |
      vault kv get -field=ca.testpeer-cert.pem secret/crypto/peerOrganizations/testpeer/ca
      vault kv get -field=testpeer-CA.key secret/crypto/peerOrganizations/testpeer/ca
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_peer_CA_cert_key
    delegate_to: localhost
  
#####################################################################################
  #This task assert if the orderer tls certs is created or not
  - name: Assert if the orderer tls cert are present in the Vault
    assert:
      that: vault_peer_CA_cert_key.failed == False

#####################################################################################
  #This task checks if the ca server admin credentials is created or not
  - name: Check if the ca server admin credentials are written to Vault for peers
    shell: |
      vault kv get secret/credentials/testpeer/ca/testpeer
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_caadmin_result
    delegate_to: localhost
  
#####################################################################################
  #This task assert if the ca server admin credentials is created or not
  - name: Assert if the ca server admin credentials are written to Vault for peers
    assert:
      that: vault_caadmin_result.failed == False

#####################################################################################
  #This task checks if the value file is created for CA of the peers
  - name: Check if the value file is created for CA of the peers
    stat:
      path: "test/test_ca/testpeer.yaml"
    register: peer_ca_check
  
#####################################################################################
  #This task assert if the value file is created for CA of the peers
  - name: Assert if the value file is created for CA of the peers
    assert:
      that: peer_ca_check.stat.exists

######## CRYPTO SCRIPT ##############################
#####################################################################################
#####################################################################################
  #This task checks if the crypto_script is created for the orderers
  - name: Check if the crypto_script is created for orderers
    stat:
      path: "./build/generate-crypto-testorderer-testorderer1.sh"
    register: gc_orderer_check
  
#####################################################################################
  #This task assert if the value file exists or not for orderers
  - name: Assert if the value file exists or not for orderers
    assert:
      that: gc_orderer_check.stat.exists

#####################################################################################
  #This task checks if the crypto_script is created for the peers
  - name: Check if the crypto_script is created for peers
    stat:
      path: "./build/generate-crypto-testpeer.sh"
    register: gc_peer_check

#####################################################################################
  #This task assert if the value file exists or not for peers
  - name: Assert if the value file exists or not for peers
    assert:
      that: gc_peer_check.stat.exists

# #####################################################################################
# #####################################################################################
# #####################################################################################
# #####################################################################################
#   #This task checks if the orderer tls cert is created or not
#   - name: Check if the orderer certs are written to Vault
#     shell: |
#       vault kv get -field=ca.crt secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/tls 
#       vault kv get -field=server.crt secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/tls 
#       vault kv get -field=admincerts secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/msp  
#       vault kv get -field=cacert secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/msp  
#       vault kv get -field=keystore secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/msp 
#     environment:
#       VAULT_ADDR: "http://localhost:9090"
#       VAULT_TOKEN: "root"
#     register: vault_tls_result
  
# #####################################################################################
#   #This task assert if orderer tls is created or not
#   - name: Assert if the orderer tls cert are present in the Vault
#     assert:
#       that: vault_tls_result.failed == True
  
  #This task checks if the orderer1.key is created for orderers or not
  - name: Check if the orderer1.key is created for orderers or not
    stat:
      path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer1-testorderer.key"
    register: orderer1_key_check
  
#####################################################################################
  #This task assert if the orderer1.key exists for orderers
  - name: Assert if the orderer1.key exists for orderers
    assert:
      that: orderer1_key_check.stat.exists

# #####################################################################################
#   #This task checks if the orderer2.key is created for orderers or not
#   - name: Check if the orderer2.key is created for orderers or not
#     stat:
#       path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer2-testorderer.key"
#     register: orderer2_key_check
  
# #####################################################################################
#   #This task assert if the orderer2.key exists for orderers
#   - name: Assert if the orderer2.key exists for orderers
#     assert:
#       that: orderer2_key_check.stat.exists

#####################################################################################
  #This task checks if the orderer1.csr is created for orderers or not
  - name: Check if the orderer1.csr is created for orderers or not
    stat:
      path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer1-testorderer.csr"
    register: orderer1_csr_check
  
#####################################################################################
  #This task assert if the orderer1.csr exists for orderers
  - name: Assert if the orderer1.csr exists for orderers
    assert:
      that: orderer1_csr_check.stat.exists

# #####################################################################################
#   #This task checks if the orderer2.csr is created for orderers or not
#   - name: Check if the orderer2.csr is created for orderers or not
#     stat:
#       path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer2-testorderer.csr"
#     register: orderer2_csr_check
  
# #####################################################################################
#   #This task assert if the orderer2.csr exists for orderers
#   - name: Assert if the orderer2.csr exists for orderers
#     assert:
#       that: orderer2_csr_check.stat.exists

#####################################################################################
  #This task checks if the orderer1.pem is created for orderers or not
  - name: Check if the orderer1.pem is created for orderers or not
    stat:
      path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer1-testorderer.pem"
    register: orderer1_pem_check
  
#####################################################################################
  #This task assert if the orderer1.pem exists for orderers
  - name: Assert if the orderer1.pem exists for orderers
    assert:
      that: orderer1_pem_check.stat.exists

# #####################################################################################
#   #This task checks if the orderer2.pem is created for orderers or not
#   - name: Check if the orderer2.pem is created for orderers or not
#     stat:
#       path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer2-testorderer.pem"
#     register: orderer2_pem_check
  
# #####################################################################################
#   #This task assert if the orderer2.pem exists for orderers
#   - name: Assert if the orderer2.pem exists for orderers
#     assert:
#       that: orderer2_pem_check.stat.exists

#####################################################################################
  #This task checks if the orderer1.certchain is created for orderers or not
  - name: Check if the orderer1.certchain is created for orderers or not
    stat:
      path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer1-testorderer-certchain.pem"
    register: orderer1_certchain_check
  
#####################################################################################
  #This task assert if the orderer1.certchain exists for orderers
  - name: Assert if the orderer1.certchain exists for orderers
    assert:
      that: orderer1_certchain_check.stat.exists

# #####################################################################################
#   #This task checks if the orderer2.certchain is created for orderers or not
#   - name: Check if the orderer2.certchain is created for orderers or not
#     stat:
#       path: "./build/crypto-config/ordererOrganizations/testorderer/testorderer2-testorderer-certchain.pem"
#     register: orderer2_certchain_check
  
# #####################################################################################
#   #This task assert if the orderer2.certchain exists for orderers
#   - name: Assert if the orderer2.certchain exists for orderers
#     assert:
#       that: orderer2_certchain_check.stat.exists

#####################################################################################
  #This task checks if the orderer ambassador cert is created or not
  - name: Check if the crypto material for orderer ambassador are written to Vault
    shell: |
      vault kv get -field=certificate secret/crypto/ordererOrganizations/testorderer/ambassador/testorderer1
      vault kv get -field=key secret/crypto/ordererOrganizations/testorderer/ambassador/testorderer1
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_orderer_ambassador
  
#####################################################################################
  #This task assert if the orderer tls certs is created or not
  - name: Assert if the orderer tls cert are present in the Vault
    assert:
      that: vault_orderer_ambassador.failed == False
# 
# 
# 
# 
# 
# CRPTYO/PEER
#####################################################################################
  #This task checks if the peer.key for peer0 is created or not
  - name: Check if the peer.key for peer0 is created or not
    stat:
      path: "./build/crypto-config/peerOrganizations/testpeer/testpeer0-testpeer.key"
    register: peer0_key_check
  
#####################################################################################
  #This task assert if the peer.key for peer0 is created or not
  - name: Assert if the peer.key for peer0 is created or not
    assert:
      that: peer0_key_check.stat.exists

#####################################################################################
  #This task checks if the peer.csr for peer0 is created or not
  - name: Check if the peer.csr for peer0 is created or not
    stat:
      path: "./build/crypto-config/peerOrganizations/testpeer/testpeer0-testpeer.csr"
    register: peer0_csr_check
  
#####################################################################################
  #This task assert if the peer.csr for peer0 is created or not
  - name: Assert if the peer.csr for peer0 is created or not
    assert:
      that: peer0_csr_check.stat.exists

#####################################################################################
  #This task checks if the peer.pem for peer0 is created or not
  - name: Check if the peer.pem for peer0 is created or not
    stat:
      path: "./build/crypto-config/peerOrganizations/testpeer/testpeer0-testpeer.pem"
    register: peer0_pem_check
  
#####################################################################################
  #This task assert if the peer.pem for peer0 is created or not
  - name: Assert if the peer.pem for peer0 is created or not
    assert:
      that: peer0_pem_check.stat.exists

#####################################################################################
  #This task checks if the peer-certchain.pem for peer0 is created or not
  - name: Check if the peer-certchain.pem for peer0 is created or not
    stat:
      path: "./build/crypto-config/peerOrganizations/testpeer/testpeer0-testpeer-certchain.pem"
    register: peer0_certchain_check
  
#####################################################################################
  #This task assert if the peer-certchain.pem for peer0 is created or not
  - name: Assert if the peer-certchain.pem for peer0 is created or not
    assert:
      that: peer0_certchain_check.stat.exists


# #####################################################################################
#   #This task checks if the config.yaml is created or not
#   - name: Check if the config.yaml is created or not
#     stat:
#       path: "./build/crypto-config/peerOrganizations/testpeer/msp/config.yaml"
#     register: config_file_check
  
# #####################################################################################
#   #This task assert if the config.yaml is created or not
#   - name: Assert if the config.yaml is created or not
#     assert:
#       that: config_file_check.stat.exists

# #####################################################################################
#   #This task checks if the ca server admin credentials is created or not
#   - name: Check if the ca server admin credentials are written to Vault for orderer
#     shell: |
#       vault kv get secret/credentials/testorderer/ca/testorderer
#     environment:
#       VAULT_ADDR: "{{ vault.url }}"
#       VAULT_TOKEN: "{{ vault.root_token }}"
#     register: vault_caadmin_result
  
# #####################################################################################
#   #This task assert if the ca server admin credentials is created or not
#   - name: Assert if the ca server admin credentials are written to Vault for orderer
#     assert:
#       that: not vault_caadmin_result.failed



# #####################################################################################
#   #This task checks if the orderer tls cert is created or not
#   - name: Check if the orderer tls certs are written to Vault
#     shell: |
#       vault kv get -field=ca.crt secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/tls 
#       vault kv get -field=server.crt secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/tls 
#       vault kv get -field=admincerts secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/msp  
#       vault kv get -field=cacert secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/msp  
#       vault kv get -field=keystore secret/crypto/ordererOrganizations/testorderer/orderers/testorderer1.testorderer/msp 
#     environment:
#       VAULT_ADDR: "{{ vault.url }}"
#       VAULT_TOKEN: "{{ vault.root_token }}"
#     register: vault_tls_result
  
# #####################################################################################
#   #This task assert if orderer tls is created or not
#   - name: Assert if the orderer tls cert are present in the Vault
#     assert:
#       that: vault_tls_result.failed == True

# #####################################################################################
#   #This task checks if the orderer tls cert is created or not
#   - name: Check if the crypto material for orderer ambassador are written to Vault
#     shell: |
#       vault kv get -field=certificate secret/crypto/ordererOrganizations/testorderer/ambassador/testorderer1
#       vault kv get -field=key secret/crypto/ordererOrganizations/testorderer/ambassador/testorderer1
#     environment:
#       VAULT_ADDR: "{{ vault.url }}"
#       VAULT_TOKEN: "{{ vault.root_token }}"
#     register: vault_orderer_ambassador
  
# #####################################################################################
#   #This task assert if the orderer tls certs is created or not
#   - name: Assert if the orderer tls cert are present in the Vault
#     assert:
#       that: vault_orderer_ambassador.failed == False

# #####################################################################################

# #####################################################################################
#   #This task checks if the crypto material for orgs is created or not
#   - name: Check if the crypto material for orgs are written to Vault
#     shell: |
#       vault kv get -field=ca.crt secret/crypto/peerOrganizations/testpeer/peers/testpeer0.testpeer/tls 
#       vault kv get -field=server.crt secret/crypto/peerOrganizations/testpeer/peers/testpeer0.testpeer/tls 
#       vault kv get -field=server.key secret/crypto/peerOrganizations/testpeer/peers/testpeer0.testpeer/tls 
#       vault kv get -field=admincerts secret/crypto/peerOrganizations/testpeer/peers/testpeer0.testpeer/msp 
#       vault kv get -field=cacerts secret/crypto/peerOrganizations/testpeer/peers/testpeer0.testpeer/msp 
#       vault kv get -field=keystore secret/crypto/peerOrganizations/testpeer/peers/testpeer0.testpeer/msp
#     environment:
#       VAULT_ADDR: "{{ vault.url }}"
#       VAULT_TOKEN: "{{ vault.root_token }}"
#     register: vault_peer_crypto_result

# #####################################################################################
#   #This task assert if the orderer certificates is created or not
#   - name: Assert if the peer crypto present in the Vault
#     assert:
#       that: vault_peer_crypto_result.failed == False

# #####################################################################################
#   #This task checks if the crypto material for orgs is created or not
#   - name: Check if the crypto material for orgs are written to Vault
#     shell: |
#       vault kv get -field=clientcert secret/crypto/peerOrganizations/testpeer/ambassador 
#       vault kv get -field=certificate secret/crypto/peerOrganizations/testpeer/ambassador  
#       vault kv get -field=key secret/crypto/peerOrganizations/testpeer/ambassador  
#     environment:
#       VAULT_ADDR: "{{ vault.url }}"
#       VAULT_TOKEN: "{{ vault.root_token }}"
#     register: vault_peer_ambassador

# #####################################################################################
#   #This task assert if the orderer certificates is created or not
#   - name: Assert if the peer crypto present in the Vault
#     assert:
#       that: vault_peer_ambassador.failed == False