#############################################################################################
# This role generates crypto material for orderers.
#############################################################################################

# Check if CA-tools pod is running
- name: Check if CA-tools is running
  k8s_facts:
    kind: Pod
    namespace: "{{ component_name }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
    label_selectors:
      - name = ca-tools   
  register: ca_tools
  until: ("Running" in ca_tools|json_query('resources[*].status.phase'))
  retries: "{{ network.env.retry_count}}"
  delay: 40

# Ensure ca directory is present in build
- name: Ensure ca directory exists
  file:
    path: "./build/crypto-config/ordererOrganizations/{{ component_name }}/ca"
    recurse: yes
    state: directory

# Check if CA certs exists in vault, if not this should fail. If yes, get the certificate
- name: Check if ca certs already created
  shell: |
    vault kv get -field=ca.{{ component_name }}-cert.pem secret/crypto/ordererOrganizations/{{ component_name }}/ca > ca.{{ component_name }}-cert.pem
    mv ca.{{ component_name }}-cert.pem ./build/crypto-config/ordererOrganizations/{{ component_name }}/ca/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"

# Check if CA key exists in vault, if not this should fail. If yes, get the certificate
- name: Check if ca key already created
  shell: |
    vault kv get -field={{ component_name }}-CA.key secret/crypto/ordererOrganizations/{{ component_name }}/ca > {{ component_name }}-CA.key
    mv {{ component_name }}-CA.key ./build/crypto-config/ordererOrganizations/{{ component_name }}/ca/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"

# Check orderer msp already created
- name: Check if orderer msp already created
  shell: |
    vault kv get -format=yaml secret/crypto/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp
  vars:
    orderer: "{{ services.orderer }}"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_msp_result
  ignore_errors: yes

- name: Get MSP info
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_crypto"
  vars:
    vault_output: "{{ vault_msp_result.stdout | from_yaml }}"
    type: "orderer"
    msp_path: "./build/crypto-config/ordererOrganizations/{{ component_name }}/msp"
  when: vault_msp_result.failed == False

############################################################################################
# This task creates directory path on CA Tools CLI
- name: Create directory path on CA Tools
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get pods -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ component_name }}  ${CA_TOOL_CLI} -- mkdir -p crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ component_name }}  ${CA_TOOL_CLI} -- mkdir -p /root/ca-tools/{{org_name|lower}}
  when: vault_msp_result.failed == True

############################################################################################
# This task installs dos2unix on the Ansible container
- name: "Install dos2unix to use unarchieve module of ansible"
  apt:
    name: dos2unix
  when: vault_msp_result.failed == True

# Copy generate-crypto script from scrips directory
- name: Copy generate-usercrypto.sh to destination directory
  copy:
    src: "{{ playbook_dir }}/../scripts/{{ files }}"
    dest: "./build/{{ files }}"
    mode: 0755
    remote_src: yes
  with_items:
    - generate-user-crypto.sh
  loop_control:
    loop_var: files
  when: vault_msp_result.failed == True

############################################################################################
# This task converts the generate_crypto.sh file to unix format
- name: Convert the file to unix format
  shell: |
    dos2unix ./build/{{ files }}
    chmod 755 ./build/{{ files }}
  with_items:
    - "generate-crypto-{{ org_name|lower }}.sh"
    - generate-user-crypto.sh
  loop_control:
    loop_var: files
  when: vault_msp_result.failed == True

############################################################################################
# This task copy the generate_crypto.sh and cert files in the respective CA Tools CLI
- name: Copy the generate_crypto.sh file into the CA Tools 
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get po -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/generate-crypto-{{ org_name|lower }}.sh {{ component_name }}/${CA_TOOL_CLI}:/root/ca-tools/{{org_name|lower}}/generate-crypto.sh
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/generate-user-crypto.sh {{ component_name }}/${CA_TOOL_CLI}:/root/ca-tools/{{org_name|lower}}/generate-user-crypto.sh
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/crypto-config/{{component_type}}Organizations/{{ component_name }}/ca/ca.{{ component_name }}-cert.pem {{ component_name }}/${CA_TOOL_CLI}:crypto-config/{{component_type}}Organizations/{{ component_name }}/ca/
  when: vault_msp_result.failed == True

############################################################################################
# This task generates the crypto material by executing the generate_crypto.sh script file
# present in the Organizations CA Tools CLI
- name: Generate crypto material for organization orderers
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get po -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ component_name }} ${CA_TOOL_CLI} -- /root/ca-tools/{{org_name|lower}}/./generate-crypto.sh
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ component_name }} ${CA_TOOL_CLI} -- /root/ca-tools/{{org_name|lower}}/./generate-user-crypto.sh orderer {{component_name}} {{org_name|lower}} 1 {{org_name}} "{{subject}}"
  when: vault_msp_result.failed == True

############################################################################################
# This task copies the generated crypto material from the respective CA Tools CLI
# to the Ansible container
- name: Copy the crypto config folder from the ca tools
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }}  kubectl get po -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ component_name }}/${CA_TOOL_CLI}:crypto-config ./build/crypto-config
  when: vault_msp_result.failed == True

############################################################################################
# These roles put the above created crypto material in the vault
- name: Copy the crypto material for orderer
  shell: |
    vault write secret/crypto/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/tls ca.crt="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/tls/ca.crt)" server.crt="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/tls/server.crt)" server.key="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/tls/server.key)"
    vault write secret/crypto/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp admincerts="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp/admincerts/Admin@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem)" keystore="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/ordererOrganizations/{{ component_name }}/orderers/{{orderer.name}}.{{ component_name }}/msp/tlscacerts/ca-{{ component_name }}-7054.pem)"
  vars:
    orderer: "{{ services.orderer }}"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_msp_result.failed == True

# Check if Ambassador credentials exist already
- name: Check Ambassador cred exists
  k8s_facts:
    kind: Secret
    namespace: default
    name: orderer-{{ component_name }}-ambassador-certs
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_orderer_secret

 #Check the existence of Orderer ambassador certs secret in the vault 
- name: Check if orderer ambassador secrets already created
  shell: |
    vault kv get -format=yaml secret/crypto/{{ component_type }}Organizations/{{ component_name }}/ambassador
  vars:
    orderer: "{{ services.orderer }}"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_orderer_ambassador
  ignore_errors: yes


- name: Get Orderer ambassador info
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_ambassador_crypto"
  vars:
    vault_output: "{{ vault_orderer_ambassador.stdout | from_yaml }}"
    type: "orderer"
    orderer: "{{ services.orderer }}"
    orderer_ambassador_path: "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}"
  when: vault_orderer_ambassador.failed == False
  

# This task generates orderer certificates
- name: Generate the orderer certificate
  shell: |
    cd "./build/crypto-config/ordererOrganizations/{{ component_name }}"
    openssl ecparam -name prime256v1 -genkey -noout -out {{ orderer.name }}-{{ component_name }}.key
    openssl req -config "{{ playbook_dir }}/openssl.conf" -new -nodes -key {{ orderer.name }}-{{ component_name }}.key -days 1000 -out {{ orderer.name }}-{{ component_name }}.csr -extensions v3_req -subj "/{{ cert_subject }}/CN={{ orderer.name }}.{{item.external_url_suffix}}"
    openssl x509 -extfile "{{ playbook_dir }}/openssl.conf" -req -days 1000 -in {{ orderer.name }}-{{ component_name }}.csr -CA ./ca/ca.{{ component_name }}-cert.pem -CAkey ./ca/{{ component_name }}-CA.key -out {{ orderer.name }}-{{ component_name }}.pem -set_serial 01 -extensions v3_req
    cat {{ orderer.name }}-{{ component_name }}.pem > {{ orderer.name }}-{{ component_name }}-certchain.pem
    cat ./ca/ca.{{ component_name }}-cert.pem >> {{ orderer.name }}-{{ component_name }}-certchain.pem
  vars:
    orderer: "{{ services.orderer }}"
  when: get_orderer_secret.resources|length == 0 and vault_orderer_ambassador.failed == True
    

# This task creates the Ambassador TLS credentials for orderer
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl create secret tls {{orderer.name}}-{{ component_name }}-ambassador-certs --cert=./build/crypto-config/ordererOrganizations/{{ component_name }}/{{orderer.name}}-{{ component_name }}-certchain.pem --key=./build/crypto-config/ordererOrganizations/{{ component_name }}/{{orderer.name}}-{{ component_name }}.key -n default
  vars:
    orderer: "{{ services.orderer }}"
  when: get_orderer_secret.resources|length == 0


 # This task copy the orderer certificates generated above, to the Vault
- name: Copy the crypto material to Vault
  shell: |
    vault write secret/crypto/{{ component_type }}Organizations/{{ component_name }}/ambassador certificate="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{orderer.name}}-{{ component_name }}-certchain.pem")" key="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ orderer.name }}-{{ component_name }}.key")"
  vars:
    orderer: "{{ services.orderer }}"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_orderer_ambassador.failed == True 
