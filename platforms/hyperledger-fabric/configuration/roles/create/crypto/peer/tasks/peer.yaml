
- name: Copy the crypto material for orgs
  shell: |
    vault write secret/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/ca.crt)" server.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/server.crt)" server.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/server.key)"
    vault write secret/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/admincerts/Admin@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/tlscacerts/ca-{{ component_name }}-7054.pem)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_msp_result.failed == True

# Check if Ambassador credentials exist already
- name: Check Ambassador cred exists
  k8s_facts:
    kind: Secret
    namespace: default
    name: "{{ peer.name }}-{{ component_name }}-ambassador-certs"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_peer_secret

 #Check the existence of Peer ambassador certs secret in the vault 
- name: Check if peer ambassador secrets certs created
  shell: |
    vault kv get -format=yaml secret/crypto/peerOrganizations/{{ component_name }}/ambassador
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_peer_ambassador
  ignore_errors: yes

- name: Get peer ambassador info
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_ambassador_crypto"
  vars:
    vault_output: "{{ vault_peer_ambassador.stdout | from_yaml }}"
    type: "peer"
    peer_ambassador_path: "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}"
  when: vault_peer_ambassador.failed == False

# This task generates peer certificates
- name: Generate the peer certificate
  shell: |
    cd "./build/crypto-config/peerOrganizations/{{ component_name }}"
    cp ./peers/{{ peer.name }}.{{ component_name }}/tls/server.key {{ peer.name }}-{{ component_name }}.key
    cp ./peers/{{ peer.name }}.{{ component_name }}/tls/server.crt {{ peer.name }}-{{ component_name }}.pem
    #openssl ecparam -name prime256v1 -genkey -noout -out {{ peer.name }}-{{ component_name }}.key
    #openssl req -config "{{ playbook_dir }}/openssl.conf" -new -nodes -key {{ peer.name }}-{{ component_name }}.key -days 1000 -out {{ peer.name }}-{{ component_name }}.csr -extensions v3_req -subj "/{{ cert_subject }}/CN={{ peer.name }}.{{ component_name }}.{{item.external_url_suffix}}"
    #openssl x509 -extfile "{{ playbook_dir }}/openssl.conf" -req -days 1000 -in {{ peer.name }}-{{ component_name }}.csr -CA ./ca/ca.{{ component_name }}-cert.pem -CAkey ./ca/{{ component_name }}-CA.key -out {{ peer.name }}-{{ component_name }}.pem -set_serial 01 -extensions v3_req
    cat {{ peer.name }}-{{ component_name }}.pem > {{ peer.name }}-{{ component_name }}-certchain.pem
    cat ./ca/ca.{{ component_name }}-cert.pem >> {{ peer.name }}-{{ component_name }}-certchain.pem
  when:  get_peer_secret.resources|length == 0 and vault_peer_ambassador.failed == True
  
# This task creates the Ambassador TLS credentials for peer
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl create secret tls {{ peer.name }}-{{ component_name }}-ambassador-certs --cert=./build/crypto-config/peerOrganizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}-certchain.pem --key=./build/crypto-config/peerOrganizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.key -n default
  when: get_peer_secret.resources|length == 0

 # This task copy the peer certificates generated above, to the Vault
- name: Copy the crypto material to Vault
  shell: |
    vault write secret/crypto/{{ component_type }}Organizations/{{ component_name }}/ambassador clientcert="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.pem")" certificate="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}-certchain.pem")" key="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.key")"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_peer_ambassador.failed == True 