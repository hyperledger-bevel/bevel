apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
spec:
  serviceName: "{{ $.Values.metadata.name }}"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
    spec:
      restartPolicy: OnFailure
      imagePullSecrets:
        - name: "{{ $.Values.image.pullSecret }}"
      serviceAccountName: {{ $.Values.account.service }}
      containers:
        - name:  "{{ $.Values.image.name }}"
          image: "{{ $.Values.image.repository }}"
          imagePullPolicy: Always
          command:
            - "/bin/bash"
            - "-c"
            - >
              apt-get install curl -y;
              validateVaultResponse () {
              if echo ${2} | grep "errors"; then
               echo "ERROR: unable to retrieve ${1}: ${2}"
               exit 1
               fi
              }

              KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token);

              curl --request POST --data '{"jwt": "'"$KUBE_TOKEN"'", "role": "{{ $.Values.account.role }}"}' {{ $.Values.vault.address }}/v1/auth/kubernetes/login | jq -j '.auth.client_token' > token;
              VAULT_TOKEN=$(cat token);
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}";

              generate_identity {{ $.Values.vault.identity }} {{ $.Values.vault.keyPath }} vault {{ $.Values.vault.address }}
