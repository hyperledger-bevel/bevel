#########################
# Playbook to create deployment files for namespaces, service account and clusterrolebinding
# Playbook arguments: complete network.yaml
#########################
- hosts: ansible_provisioners
  gather_facts: no
  tasks:
  # ----------------------------------------------------------------------

  # Create namespaces for organizations
  - name: 'Create namespace'
    include_role:
      name: create/namespace
    vars:
      component_name: "{{ organizationItem.name | lower }}-ns"
      component_type_name: "{{ organizationItem.type | lower }}"
      kubernetes: "{{ organizationItem.k8s }}"
      release_dir: "{{playbook_dir}}/../../../{{organizationItem.gitops.release_dir}}/{{ organizationItem.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: organizationItem
    when: network['type'] == 'indy'

    # Generate indy crypto and insert into Vault
    - name: 'Generate indy crypto and insert into Vault'
      include_role:
        name: setup/crypto
      vars:
        organization: "{{ organizationItem.name | lower }}"
        component_ns: "{{ organizationItem.name | lower }}-ns"
        component_name: "{{ organization }}"
        services: "{{ organizationItem.services }}"
        kubernetes: "{{ organizationItem.k8s }}"
        vault: "{{ organizationItem.vault }}"
        gitops: "{{ organizationItem.gitops }}"
        vault_ac_token: "{{ organizationItem.vault.root_token }}"
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: organizationItem

  # Deploy all other nodes
  - name: 'Deploy nodes'
    include_role:
      name: setup/node
    vars:
      organization: "{{ organizationItem.name | lower }}"
      component_ns: "{{ organizationItem.name | lower }}-ns"
      services: "{{ organizationItem.services }}"
      kubernetes: "{{ organizationItem.k8s }}"
      vault: "{{ organizationItem.vault }}"
      gitops: "{{ organizationItem.gitops }}"
      domainGenesis: "{{ domainGenesis }}"
      poolGenesis: "{{ poolGenesis }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: organizationItem
    when: network['type'] == 'indy' and organizationItem.type == 'peer'

  # delete build directory
  - name: Remove build directory
    file:
      path: "./build"
      state: absent
