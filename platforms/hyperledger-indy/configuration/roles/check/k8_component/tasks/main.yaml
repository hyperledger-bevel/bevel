---
# Task to check if Namespace, Clusterrolebinding or StorageClass is created
# This task will try for a maximum of 10 times with an interval of
# 35 seconds between each try
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_facts:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: component_data
  retries: 10
  delay: 35
  until: component_data.resources|length > 0
  when: component_type == "Namespace" or component_type == "ClusterRoleBinding" or component_type == "StorageClass"


# Task to check if ServiceAccount is created
# This task will try for a maximum of 10 times with an interval of
# 35 seconds between each try
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_facts:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    namespace: "{{ component_ns }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: component_data
  retries: 10
  delay: 35
  until: component_data.resources|length > 0
  when: component_type == "ServiceAccount"


# Task to check if Pod is running
# This task will try for a maximum of 10 times with an interval of
# 35 seconds between each try
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_facts:
    kind: "{{ component_type }}"
    namespace: "{{ component_ns }}"
    label_selectors:
    - app={{ component_name }}
    field_selectors:
    - status.phase=Running
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: result
  until: result.resources|length > 0
  retries: 10
  delay: 40
  when: component_type == "Pod"

# Get a service account token
- name: Get a ServiceAccount token for {{ component_name }}
  vars:
    service_account: "{{ component_name }}"
    role: "{{ organization }}-baf-ac-ro"
  shell: |
    secret=$(kubectl get serviceaccount {{ service_account }} -n {{ component_ns }} -o=jsonpath={.secrets[0].name})
    kube_token=$(kubectl get secret ${secret} -n {{ component_ns }} -o=jsonpath={.data.token})
    curl --request POST --data '{"jwt": "'"$kube_token"'", "role": "{{ role }}"}' {{ vault.url }}/v1/auth/kubernetes/login | jq -j '.auth.client_token' > token
    vault_token=$(cat token)
    echo ${vault_token}
  register: token
  when: component_type == "GetServiceAccount"
