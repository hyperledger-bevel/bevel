##############################################################################################
# This role get vault root token for organization and remove Indy crypto from vault
##############################################################################################

---
# Get admin root token of organization
- name: Get admin root token of {{ organization }}
  shell: |
    validateVaultResponse () {
      if [ ${1} != 200 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }

    # Get root token from Vault via K8S service account
    secret_name=$(kubectl get serviceaccount {{ acount }} -n {{ organization_ns }} -o jsonpath="{ .secrets[0].name }")
    kube_token=$(kubectl get secret ${secret_name} -n {{ organization_ns }} -o jsonpath="{ .data.token }" | base64 --decode)
    vault_token=$(curl --request POST --data '{"jwt": "'"$kube_token"'", "role": "{{ role }}"}' {{ vault.url }}/v1/auth/{{ auth_path }}/login | jq -j '.auth.client_token')

    # Check if Vault token is valid
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" {{ vault.url }}/v1/auth/token/lookup-self)
    validateVaultResponse ${response_status}

    echo ${vault_token}
  register: admin_token

# Remove Indy Crypto
- name: Remove Indy Crypto of {{ organization }}
  environment:
    vault_token: "{{ admin_token.stdout }}"
  shell: |
    validateDeletion () {
      if [ ${1} != 404 ]; then
        echo "ERROR: Secret is not deleted. Http status: ${1}"
        exit 1
      fi
    }

    # Remove organization secret from Vault and check if is removed
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request LIST {{ vault.url }}/v1/{{ organization }})
    validateVaultResponse ${response_status}

    curl --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/mounts/{{ organization }}
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request LIST {{ vault.url }}/v1/{{ organization }})
    validateDeletion ${response_status}

    echo ${response_status}

# Remove Policies of trustees
- name: Remove Policies of trustees
  environment:
    vault_token: "{{ vault.root_token }}"
  shell: |
    validateVaultResponse () {
      if [ ${1} != 204 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/policy/{{ serviceItem.name }}-ro)
    validateVaultResponse ${response_status}
  loop: "{{ services.trustees }}"
  loop_control:
    loop_var: serviceItem
  when: services.trustees is defined

# Remove Policies of stewards
- name: Remove Policies of stewards
  environment:
    vault_token: "{{ vault.root_token }}"
  shell: |
    validateVaultResponse () {
      if [ ${1} != 204 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/policy/{{ serviceItem.name }}-ro)
    validateVaultResponse ${response_status}
  loop: "{{ services.stewards }}"
  loop_control:
    loop_var: serviceItem
  when: services.stewards is defined

# Remove Policies of endorsers
- name: Remove Policies of endorsers
  environment:
    vault_token: "{{ vault.root_token }}"
  shell: |
    validateVaultResponse () {
      if [ ${1} != 204 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/policy/{{ serviceItem.name }}-ro)
    validateVaultResponse ${response_status}
  loop: "{{ services.endorsers }}"
  loop_control:
    loop_var: serviceItem
  when: services.endorsers is defined

# Remove Policies of organization
- name: Remove Policies of {{ organization }}
  environment:
    vault_token: "{{ vault.root_token }}"
  shell: |
    validateVaultResponse () {
      if [ ${1} != 204 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }

    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/policy/{{ organization }}-ac-ro)
    validateVaultResponse ${response_status}
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/policy/{{ organization }}-admin-rw)
    validateVaultResponse ${response_status}

# Remove Kubernetes Authentication Methods
- name: Remove Kubernetes Authentication Methods of {{ organization }}
  vars:
    auth_path: "kubernetes-{{ organization }}"
  environment:
    vault_token: "{{ vault.root_token }}"
  shell: |
    validateVaultResponse () {
      if [ ${1} != 204 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/sys/auth/{{ auth_path }})
    validateVaultResponse ${response_status}
  when: vault.root_token is defined
