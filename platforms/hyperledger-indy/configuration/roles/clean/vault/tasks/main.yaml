##############################################################################################
# This role get vault root token for organization and remove Indy crypto from vault
##############################################################################################

---
# Get admin root token of organization
- name: Get admin root token of {{ organization }}
  shell: |
    validateVaultResponse () {
      if [ ${1} != 200 ]; then
        echo "ERROR: Unable to retrieve. Http status: ${1}"
        exit 1
      fi
    }
    # Get root token from Vault via K8S service account
    secret_name="$(kubectl get serviceaccount vault-auth -o go-template='{{ (index .secrets 0).name }}')"
    kube_token="$(kubectl get secret ${secret_name} -o go-template='{{ .data.token }}' | base64 --decode)"
    curl --request POST --data '{"jwt": "'"kube_token"'", "role": "{{ role }}"}' {{ vault.url }}/v1/auth/{{ $.Values.vault.auth_path }}/login | jq -j '.auth.client_token' > token;

    # Check if Vault token is valid
    response_status=$(curl -o /dev/null -s -w "%{http_code}\n" --header "X-Vault-Token: ${token}" {{ vault.url }}/v1/auth/token/lookup-self)
    validateVaultResponse ${response_status}

    # Remove organization's secret from Vault and check if is removed
    curl --header "X-Vault-Token: ${vault_token}" --request DELETE {{ vault.url }}/v1/{{ organization }}
    response_status=$(curl --header "X-Vault-Token: ${vault_token}" --request LIST {{ vault.url }}/v1/{{ organization }})
    validateVaultResponse ${response_status}