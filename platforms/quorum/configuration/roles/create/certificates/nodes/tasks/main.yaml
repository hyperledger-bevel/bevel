# This role calls for ambassador certifacate creation for each node.
---
  - name: Create Ambassador certificates
    include_role: 
      name: "create/certificates/ambassador"
    vars:
      node_name: {{ node.name | lower }}
    loop: "{{ services.peers }}"
      loop_var: node
# # create the root directory where CA root certificates and key will be placed
# - name: Ensure rootca dir exists
#   file:
#     path: "{{ rootca }}"
#     recurse: yes
#     state: directory

# # Checks if certificates for root are already created and stored in vault.
# - name: Check if root certs already created
#   shell: |
#     vault kv get -format=yaml secret/{{ component_name }}/crypto/certs
#   environment:
#     VAULT_ADDR: "{{ vault.url }}"
#     VAULT_TOKEN: "{{ vault.root_token }}"
#   register: root_certs
#   ignore_errors: yes

# # Gets the existing root certificates if any.
# - name: Get root certs
#   include_role: 
#     name: "{{ playbook_dir }}/roles/setup/get_crypto"
#   vars:
#     vault_output: "{{ root_certs.stdout | from_yaml }}"
#     type: "rootca"
#     cert_path: "{{ rootca }}"
#   when: root_certs.failed == False

# # Stores the exisiting key.jks file
# - name: check root certs
#   stat:
#     path: "{{ rootca }}/rootca.jks"
#   register: rootca_stat_result

# # generation of CA Root certificates
# - name: Generate CAroot certificate
#   shell: |
#     cd {{ rootca }}
#     eval "keytool -genkey -alias rootca -dname {{ root_subject | quote }} -keystore rootca.jks -storepass quorum -keypass quorum"
#     eval "openssl ecparam -name prime256v1 -genkey -noout -out rootca.key"
#     eval "openssl req -x509 -config {{playbook_dir}}/openssl.conf -new -nodes -key rootca.key -days 1024 -out rootca.pem -extensions v3_ca -subj '/{{ cert_subject }}'"
#     eval "openssl pkcs12 -export -name cert -inkey rootca.key -in rootca.pem -out rootcacert.pkcs12 -cacerts -passin pass:'quorum' -passout pass:'quorum'"
#     eval "openssl pkcs12 -export -name key -inkey rootca.key -in rootca.pem -out rootcakey.pkcs12 -passin pass:'quorum' -passout pass:'quorum'"
#     eval "yes | keytool -importkeystore -srckeystore rootcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass quorum -destkeystore rootca.jks -deststorepass quorum"
#     eval "yes | keytool -importkeystore -srckeystore rootcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass quorum -destkeystore rootca.jks -deststorepass quorum"
#   when: root_certs.failed == True and rootca_stat_result.stat.exists == False

# - name: Putting certs to vault for root
#   shell: |
#     vault kv put secret/{{ component_ns }}/crypto/{{ component_name }}/certs rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/rootca.pem | base64)" keystore="$(cat {{ rootca }}/rootca.key | base64)"
#   environment:
#     VAULT_ADDR: "{{ vault.url }}"
#     VAULT_TOKEN: "{{ vault.root_token }}"
#   when: root_certs.failed == True

# - name: Putting certs and credential to vault for doorman
#   shell: |
#     vault kv put {{ component_name }}/credentials/userpassword  sa="{{ userpassword_sa }}"
#     vault kv put {{ component_name }}/credentials/mongodb  mongodbPassword="{{ mongodbPassword }}"
#     vault kv put {{ component_name }}/certs doorman.jks="$(cat {{ doormanca }}/keys.jks | base64)" rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)" mongodb-{{ component_name }}.pem="$(cat {{ mongodbca }}/mongodb-{{ component_name }}.pem | base64)" mongoCA.crt="$(cat {{ mongorootca }}/mongoCA.crt | base64)"
#   environment:
#     VAULT_ADDR: "{{ vault.url }}"
#     VAULT_TOKEN: "{{ vault.root_token }}"
#   when: doorman_certs.failed == True