# This role generates certificates for doorman and rootca
# and places them in vault. Certificates are created using openssl
---
# create the root directory where CA root certificates and key will be placed
- name: Ensure rootca dir exists
  file:
    path: "{{ rootca }}"
    recurse: yes
    state: directory

# create the doorman root directory where doorman root certificates and key will be placed
- name: Ensure doormanca dir exists
  file:
    path: "{{ doormanca }}"
    recurse: yes
    state: directory

# Checks if certificates for doorman are already created and stored in vault or not
- name: Check if root certs already created
  shell: |
    vault kv get -format=yaml {{ component_name }}/certs
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: root_certs
  ignore_errors: yes

# Gets the existing root certificates if any.
- name: Get root certs
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_crypto"
  vars:
    vault_output: "{{ root_certs.stdout | from_yaml }}"
    type: "rootca"
    cert_path: "{{ rootca }}"
  when: root_certs.failed == False

# Stores the exisiting key.jks file
- name: check root certs
  stat:
    path: "{{ rootca }}/keys.jks"
  register: rootca_stat_result

# generation of CA Root certificates
- name: Generate CAroot certificate
  shell: |
    cd {{ rootca }}
    eval "keytool -genkey -alias key -dname {{ root_subject | quote }} -keystore keys.jks -storepass changeme -keypass changeme"
    eval "openssl ecparam -name prime256v1 -genkey -noout -out cordarootca.key"
    eval "openssl req -x509 -config {{playbook_dir}}/openssl.conf -new -nodes -key cordarootca.key -days 1024 -out cordarootca.pem -extensions v3_ca -subj '/{{ cert_subject }}'"
    eval "openssl pkcs12 -export -name cert -inkey cordarootca.key -in cordarootca.pem -out cordarootcacert.pkcs12 -cacerts -passin pass:'changeme' -passout pass:'changeme'"
    eval "openssl pkcs12 -export -name key -inkey cordarootca.key -in cordarootca.pem -out cordarootcakey.pkcs12 -passin pass:'changeme' -passout pass:'changeme'"
    eval "yes | keytool -importkeystore -srckeystore cordarootcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
    eval "yes | keytool -importkeystore -srckeystore cordarootcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
  when: root_certs.failed == True and rootca_stat_result.stat.exists == False

- name: Check if doorman certs already created
  shell: |
    vault kv get -field=doorman.jks {{ component_name }}/certs > {{ doormanca }}/keys.jks
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: doorman_certs
  ignore_errors: yes

# creating doorman certificates
- name: Generate DoormanCA from generated root CA certificate
  shell: |
    cd {{ doormanca }}
    rm keys.jks
    eval "keytool -genkey -alias key -dname {{ doorman_subject | quote }} -keystore keys.jks -storepass changeme -keypass changeme"
    eval "openssl ecparam -name prime256v1 -genkey -noout -out cordadoormanca.key"
    eval "openssl req -new -nodes -key cordadoormanca.key -days 1000 -out cordadoormanca.csr -subj '/{{ doorman_cert_subject }}'"
    eval "openssl x509  -req -days 1000 -in cordadoormanca.csr -CA {{ rootca }}/cordarootca.pem -CAkey {{rootca}}/cordarootca.key -out cordadoormanca.pem -CAcreateserial -CAserial serial -extfile {{playbook_dir}}/openssl.conf -extensions doorman"
    eval "openssl pkcs12 -export -name cert -inkey cordadoormanca.key -in cordadoormanca.pem -out cordadoormancacert.pkcs12 -cacerts -passin pass:'changeme' -passout pass:'changeme'"
    eval "openssl pkcs12 -export -name key -inkey cordadoormanca.key -in cordadoormanca.pem -out cordadoormancakey.pkcs12 -passin pass:'changeme' -passout pass:'changeme'"
    eval "yes | keytool -importkeystore -srckeystore cordadoormancacert.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
    eval "yes | keytool -importkeystore -srckeystore cordadoormancakey.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
  when: doorman_certs.failed == True

- name: Putting certs to vault for root
  shell: |
    vault kv put {{ component_name }}/certs rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: root_certs.failed == True

- name: Putting certs and credential to vault for doorman
  shell: |
    vault kv put {{ component_name }}/credentials/userpassword  sa="{{ userpassword_sa }}"
    vault kv put {{ component_name }}/credentials/mongodb  mongodbPassword="{{ mongodbPassword }}"
    vault kv put {{ component_name }}/certs doorman.jks="$(cat {{ doormanca }}/keys.jks | base64)" rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: doorman_certs.failed == True

- name: Create Ambassador certificates
  include_role: 
    name: "create/certificates/ambassador"
    