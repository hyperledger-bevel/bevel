# This role generates certificates for networkmap 
# and places them in vault. Certificates are created using openssl
---
# create the root directory where CA root certificates and key will be placed
- name: Ensure rootca dir exists
  file:
    path: "{{ rootca }}"
    recurse: yes
    state: directory

- name: Ensure nmsca dir exists
  file:
    path: "{{ nmsca }}"
    recurse: yes
    state: directory

- name: Check if root certs already created
  shell: |
    vault kv get -format=yaml networkmap/certs
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: nms_root_certs
  ignore_errors: yes

- name: Get root certs
  include_role: 
    name: "{{ playbook_dir }}/roles/setup/get_crypto"
  vars:
    vault_output: "{{ nms_root_certs.stdout | from_yaml }}"
    type: "rootca"
    cert_path: "{{ rootca }}"
  when: nms_root_certs.failed == False

- name: check root certs
  stat:
    path: "{{ rootca }}/keys.jks"
  register: rootca_stat_result

# generation of CA Root certificates
- name: Generate CAroot certificate
  shell: |
    cd {{ rootca }}
    keytool -genkey -alias key -dname {{ root_subject | quote }} -keystore keys.jks -storepass changeme -keypass changeme
    openssl ecparam -name prime256v1 -genkey -noout -out cordarootca.key
    openssl req -x509 -config {{playbook_dir}}/openssl.conf -new -nodes -key cordarootca.key -days 1024 -out cordarootca.pem -extensions v3_ca -subj '/{{ cert_subject }}'
    openssl pkcs12 -export -name cert -inkey cordarootca.key -in cordarootca.pem -out cordarootcacert.pkcs12 -cacerts -passin pass:'changeme' -passout pass:'changeme'
    openssl pkcs12 -export -name key -inkey cordarootca.key -in cordarootca.pem -out cordarootcakey.pkcs12 -passin pass:'changeme' -passout pass:'changeme'
    eval "yes | keytool -importkeystore -srckeystore cordarootcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
    eval "yes | keytool -importkeystore -srckeystore cordarootcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
  when: nms_root_certs.failed == True and rootca_stat_result.stat.exists == False

- name: Check if networkmap certs already created
  shell: |
    vault kv get -field=networkmap.jks networkmap/certs > {{ nmsca }}/keys.jks
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: networkmap_certs
  ignore_errors: yes

# creating nms certificates
- name: Generate NMS certificate
  shell: |
    cd {{ nmsca }}
    rm keys.jks
    keytool -genkey -alias key -dname {{ nms_subject | quote }} -keystore keys.jks -storepass changeme -keypass changeme
    openssl ecparam -name prime256v1 -genkey -noout -out cordanetworkmap.key
    openssl req -new -nodes -key cordanetworkmap.key -days 1000 -out cordanetworkmap.csr -subj '/{{ nms_cert_subject }}'
    openssl x509  -req -days 1000 -in cordanetworkmap.csr -CA {{ rootca }}/cordarootca.pem -CAkey {{ rootca }}/cordarootca.key -out cordanetworkmap.pem -CAcreateserial -CAserial serial -extfile {{playbook_dir}}/openssl.conf -extensions networkMap
    openssl pkcs12 -export -name cert -inkey cordanetworkmap.key -in cordanetworkmap.pem -out cordanetworkmapcacert.pkcs12 -cacerts -passin pass:'changeme' -passout pass:'changeme'
    openssl pkcs12 -export -name key -inkey cordanetworkmap.key   -in cordanetworkmap.pem -out cordanetworkmapcakey.pkcs12 -passin pass:'changeme' -passout pass:'changeme'
    eval "yes | keytool -importkeystore -srckeystore cordanetworkmapcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
    eval "yes | keytool -importkeystore -srckeystore cordanetworkmapcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
  when: networkmap_certs.failed == True

- name: Putting certs to vault for root
  shell: |
    vault kv put networkmap/certs rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: nms_root_certs.failed == True

- name: Putting certs and credential to vault for networkmap
  shell: |
    vault kv put networkmap/credentials/mongodb  mongodbPassword="{{ mongodbPassword_networkmap }}"
    vault kv put networkmap/credentials/userpassword  sa="{{ userpassword_networkmap }}"
    vault kv put networkmap/certs networkmap.jks="$(cat {{ nmsca }}/keys.jks | base64)" rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: networkmap_certs.failed == True

- name: Create Ambassador certificates
  include_role: 
    name: "create/certificates/ambassador"
  vars:
    component_name: "networkmap"