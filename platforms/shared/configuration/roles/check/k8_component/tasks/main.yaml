---
# Task to check if Namespace, Clusterrolebinding or StorageClass is created
# This task will try for a maximum number of iterations defined in env.retry_count of network.yaml with an interval of
# 35 seconds between each try

# Check if component created without retry
- name: Check {{ component_type }} {{ component_name }} is created
  k8s_info:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: result
  when: (component_type == "Namespace" and type == "no_retry") or ( component_type == "StorageClass" and type == "no_retry" ) or (component_type == "ClusterRoleBinding" and type == "no_retry")

# Check if a component is created with retry
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_info:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: component_data
  retries: "{{ network.env.retry_count}}"
  delay: 35
  until: component_data.resources|length > 0
  when: ( component_type == "Namespace" and type == "retry" ) or (component_type == "ClusterRoleBinding" and (type is undefined or type == "retry")) or ( component_type == "StorageClass" and type == "retry" )

# Task to check if ServiceAccount is created
# This task will try for a maximum number of iterations defined in env.retry_count of network.yaml with an interval of
# 35 seconds between each try
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_info:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    namespace: "{{ component_ns }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: serviceAccount_data
  when: (component_type == "ServiceAccount" and type == "no_retry")

# Task to check if ServiceAccount is created
# This task will try for a maximum number of iterations defined in env.retry_count of network.yaml with an interval of
# 35 seconds between each try
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_info:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    namespace: "{{ component_ns }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: component_data
  retries: "{{ network.env.retry_count}}"
  delay: 35
  until: component_data.resources|length > 0
  when: (component_type == "ServiceAccount" and (type is undefined or type == 'retry'))

# Get a service account token
# - name: "Get a ServiceAccount token for {{ component_name }}"
#   vars:
#     service_account: "{{ component_name }}"
#     role: "ro"
#   shell: |
#     secret="$(KUBECONFIG={{ kubernetes.config_file }} kubectl get serviceaccount {{ service_account }} -n {{ component_ns }} -o go-template={% raw %}'{{ (index .secrets 0).name }}'{% endraw %})"
#     kube_token="$(KUBECONFIG={{ kubernetes.config_file }} kubectl get secret ${secret} -n {{ component_ns }} -o go-template={% raw %}'{{ .data.token }}'{% endraw %} | base64 -d)"
#     vault_token=$(curl --request POST --data '{"jwt": "'"$kube_token"'", "role": "{{ role }}"}' {{ vault.url }}/v1/auth/kubernetes-{{ organization }}-baf-ac-auth/login | jq -j '.auth.client_token')
#     echo ${vault_token}
#   register: token_output
#   when: component_type == "GetServiceAccount"

# - name: "Store token"
#   set_fact:
#     ac_vault_tokens: "{{ ac_vault_tokens | default({}) | combine( {organization: token_output.stdout} ) }}"
#   when: component_type == "GetServiceAccount"
