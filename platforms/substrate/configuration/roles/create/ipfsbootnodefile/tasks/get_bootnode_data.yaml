##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This task fetches the bootnode's peer id from vault
- name: Fetch bootnode peer id from vault
  shell: |
    vault kv get -field=peer_id {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/{{ peer.name }}/ipfs
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: node_id

- name: Collect Bootnode data
  set_fact:
    node_list={{ node_list|default([]) + [ {'bootnode_id':node_id.stdout, 'external_url':internal_url, 'p2p_port':peer.ipfs.swarmPort} ] }}
  vars:
    internal_url: "{{ peer.name }}-ipfs-swarm.{{ component_ns }}.svc.cluster.local"
  when: 
  - network.env.proxy == 'none'

# - name: Collect Bootnode data
#   set_fact:
#     node_list={{ node_list|default([]) + [ {'bootnode_id':node_id.stdout, 'external_url':external_url, 'p2p_port':peer.ipfs.ambassador} ] }}
#   vars:
#     external_url: "{{ peer.name }}-ipfs-swarm.{{ org.external_url_suffix }}"
#   when: 
#   - network.env.proxy == 'ambassador'

# Temp task while ipfs is unable to use ambassador
- name: Collect Bootnode data 
  set_fact:
    node_list={{ node_list|default([]) + [ {'bootnode_id':node_id.stdout, 'external_url':internal_url, 'p2p_port':peer.ipfs.swarmPort} ] }}
  vars:
    internal_url: "{{ peer.name }}-ipfs-swarm.{{ component_ns }}.svc.cluster.local"
  when: 
  - network.env.proxy == 'ambassador'
